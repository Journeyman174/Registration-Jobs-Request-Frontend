/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  OlmAddDTO,
  OlmDTOPagedResponseRequestResponse,
  OlmDTORequestResponse,
  OlmUpdateDTO,
  RequestResponse,
} from '../models/index';
import {
    OlmAddDTOFromJSON,
    OlmAddDTOToJSON,
    OlmDTOPagedResponseRequestResponseFromJSON,
    OlmDTOPagedResponseRequestResponseToJSON,
    OlmDTORequestResponseFromJSON,
    OlmDTORequestResponseToJSON,
    OlmUpdateDTOFromJSON,
    OlmUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models/index';

export interface ApiOlmAddPostRequest {
    olmAddDTO?: OlmAddDTO;
}

export interface ApiOlmDeleteIdDeleteRequest {
    id: string;
}

export interface ApiOlmGetByIdIdGetRequest {
    id: string;
}

export interface ApiOlmGetByUserIdGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiOlmGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiOlmUpdatePutRequest {
    olmUpdateDTO?: OlmUpdateDTO;
}

/**
 * 
 */
export class OlmApi extends runtime.BaseAPI {

    /**
     */
    async apiOlmAddPostRaw(requestParameters: ApiOlmAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Olm/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OlmAddDTOToJSON(requestParameters['olmAddDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOlmAddPost(requestParameters: ApiOlmAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiOlmAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOlmDeleteIdDeleteRaw(requestParameters: ApiOlmDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiOlmDeleteIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Olm/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOlmDeleteIdDelete(requestParameters: ApiOlmDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiOlmDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOlmGetByIdIdGetRaw(requestParameters: ApiOlmGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OlmDTORequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiOlmGetByIdIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Olm/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OlmDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOlmGetByIdIdGet(requestParameters: ApiOlmGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OlmDTORequestResponse> {
        const response = await this.apiOlmGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOlmGetByUserIdGetRaw(requestParameters: ApiOlmGetByUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OlmDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Olm/GetByUserId`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OlmDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOlmGetByUserIdGet(requestParameters: ApiOlmGetByUserIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OlmDTOPagedResponseRequestResponse> {
        const response = await this.apiOlmGetByUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOlmGetPageGetRaw(requestParameters: ApiOlmGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OlmDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Olm/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OlmDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOlmGetPageGet(requestParameters: ApiOlmGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OlmDTOPagedResponseRequestResponse> {
        const response = await this.apiOlmGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiOlmUpdatePutRaw(requestParameters: ApiOlmUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Olm/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OlmUpdateDTOToJSON(requestParameters['olmUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiOlmUpdatePut(requestParameters: ApiOlmUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiOlmUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
