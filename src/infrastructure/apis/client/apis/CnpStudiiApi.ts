/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CnpStudiiAddDTO,
  CnpStudiiDTOPagedResponseRequestResponse,
  CnpStudiiDTORequestResponse,
  RequestResponse,
} from '../models';
import {
    CnpStudiiAddDTOFromJSON,
    CnpStudiiAddDTOToJSON,
    CnpStudiiDTOPagedResponseRequestResponseFromJSON,
    CnpStudiiDTOPagedResponseRequestResponseToJSON,
    CnpStudiiDTORequestResponseFromJSON,
    CnpStudiiDTORequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiCnpStudiiCancelIdDeleteRequest {
    id: string;
}

export interface ApiCnpStudiiCreatePostRequest {
    cnpStudiiAddDTO?: CnpStudiiAddDTO;
}

export interface ApiCnpStudiiGetByIdIdGetRequest {
    id: string;
}

export interface ApiCnpStudiiGetFromUserIdGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class CnpStudiiApi extends runtime.BaseAPI {

    /**
     */
    async apiCnpStudiiCancelIdDeleteRaw(requestParameters: ApiCnpStudiiCancelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCnpStudiiCancelIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CnpStudii/Cancel/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCnpStudiiCancelIdDelete(requestParameters: ApiCnpStudiiCancelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiCnpStudiiCancelIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCnpStudiiCreatePostRaw(requestParameters: ApiCnpStudiiCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CnpStudii/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CnpStudiiAddDTOToJSON(requestParameters.cnpStudiiAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCnpStudiiCreatePost(requestParameters: ApiCnpStudiiCreatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiCnpStudiiCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCnpStudiiGetByIdIdGetRaw(requestParameters: ApiCnpStudiiGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CnpStudiiDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiCnpStudiiGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CnpStudii/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CnpStudiiDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCnpStudiiGetByIdIdGet(requestParameters: ApiCnpStudiiGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CnpStudiiDTORequestResponse> {
        const response = await this.apiCnpStudiiGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCnpStudiiGetFromUserIdGetRaw(requestParameters: ApiCnpStudiiGetFromUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CnpStudiiDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CnpStudii/GetFromUserId`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CnpStudiiDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCnpStudiiGetFromUserIdGet(requestParameters: ApiCnpStudiiGetFromUserIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CnpStudiiDTOPagedResponseRequestResponse> {
        const response = await this.apiCnpStudiiGetFromUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
