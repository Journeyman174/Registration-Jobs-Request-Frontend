/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RepartitiiAddDTO,
  RepartitiiDTOPagedResponseRequestResponse,
  RepartitiiDTORequestResponse,
  RepartitiiUpdateDTO,
  RequestResponse,
} from '../models';
import {
    RepartitiiAddDTOFromJSON,
    RepartitiiAddDTOToJSON,
    RepartitiiDTOPagedResponseRequestResponseFromJSON,
    RepartitiiDTOPagedResponseRequestResponseToJSON,
    RepartitiiDTORequestResponseFromJSON,
    RepartitiiDTORequestResponseToJSON,
    RepartitiiUpdateDTOFromJSON,
    RepartitiiUpdateDTOToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiRepartitieAddPostRequest {
    repartitiiAddDTO?: RepartitiiAddDTO;
}

export interface ApiRepartitieDeleteIdDeleteRequest {
    id: string;
}

export interface ApiRepartitieGetByIdIdGetRequest {
    id: string;
}

export interface ApiRepartitieGetByUserIdGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiRepartitieGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiRepartitieUpdatePutRequest {
    repartitiiUpdateDTO?: RepartitiiUpdateDTO;
}

/**
 * 
 */
export class RepartitieApi extends runtime.BaseAPI {

    /**
     */
    async apiRepartitieAddPostRaw(requestParameters: ApiRepartitieAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Repartitie/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RepartitiiAddDTOToJSON(requestParameters.repartitiiAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiRepartitieAddPost(requestParameters: ApiRepartitieAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiRepartitieAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRepartitieDeleteIdDeleteRaw(requestParameters: ApiRepartitieDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiRepartitieDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Repartitie/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiRepartitieDeleteIdDelete(requestParameters: ApiRepartitieDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiRepartitieDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRepartitieGetByIdIdGetRaw(requestParameters: ApiRepartitieGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepartitiiDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiRepartitieGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Repartitie/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepartitiiDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiRepartitieGetByIdIdGet(requestParameters: ApiRepartitieGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepartitiiDTORequestResponse> {
        const response = await this.apiRepartitieGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRepartitieGetByUserIdGetRaw(requestParameters: ApiRepartitieGetByUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepartitiiDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Repartitie/GetByUserId`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepartitiiDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiRepartitieGetByUserIdGet(requestParameters: ApiRepartitieGetByUserIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepartitiiDTOPagedResponseRequestResponse> {
        const response = await this.apiRepartitieGetByUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRepartitieGetPageGetRaw(requestParameters: ApiRepartitieGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RepartitiiDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Repartitie/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RepartitiiDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiRepartitieGetPageGet(requestParameters: ApiRepartitieGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RepartitiiDTOPagedResponseRequestResponse> {
        const response = await this.apiRepartitieGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiRepartitieUpdatePutRaw(requestParameters: ApiRepartitieUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Repartitie/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RepartitiiUpdateDTOToJSON(requestParameters.repartitiiUpdateDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiRepartitieUpdatePut(requestParameters: ApiRepartitieUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiRepartitieUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
