/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestResponse,
  StudiiAddDTO,
  StudiiDTOPagedResponseRequestResponse,
  StudiiDTORequestResponse,
  StudiiUpdateDTO,
} from '../models';
import {
    RequestResponseFromJSON,
    RequestResponseToJSON,
    StudiiAddDTOFromJSON,
    StudiiAddDTOToJSON,
    StudiiDTOPagedResponseRequestResponseFromJSON,
    StudiiDTOPagedResponseRequestResponseToJSON,
    StudiiDTORequestResponseFromJSON,
    StudiiDTORequestResponseToJSON,
    StudiiUpdateDTOFromJSON,
    StudiiUpdateDTOToJSON,
} from '../models';

export interface ApiStudiiAddPostRequest {
    studiiAddDTO?: StudiiAddDTO;
}

export interface ApiStudiiDeleteIdDeleteRequest {
    id: string;
}

export interface ApiStudiiGetByIdIdGetRequest {
    id: string;
}

export interface ApiStudiiGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiStudiiUpdatePutRequest {
    studiiUpdateDTO?: StudiiUpdateDTO;
}

/**
 * 
 */
export class StudiiApi extends runtime.BaseAPI {

    /**
     */
    async apiStudiiAddPostRaw(requestParameters: ApiStudiiAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Studii/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StudiiAddDTOToJSON(requestParameters['studiiAddDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStudiiAddPost(requestParameters: ApiStudiiAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiStudiiAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStudiiDeleteIdDeleteRaw(requestParameters: ApiStudiiDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStudiiDeleteIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Studii/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStudiiDeleteIdDelete(requestParameters: ApiStudiiDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiStudiiDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStudiiGetByIdIdGetRaw(requestParameters: ApiStudiiGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudiiDTORequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiStudiiGetByIdIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Studii/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudiiDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStudiiGetByIdIdGet(requestParameters: ApiStudiiGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudiiDTORequestResponse> {
        const response = await this.apiStudiiGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStudiiGetPageGetRaw(requestParameters: ApiStudiiGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StudiiDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Studii/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StudiiDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStudiiGetPageGet(requestParameters: ApiStudiiGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StudiiDTOPagedResponseRequestResponse> {
        const response = await this.apiStudiiGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiStudiiUpdatePutRaw(requestParameters: ApiStudiiUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Studii/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StudiiUpdateDTOToJSON(requestParameters['studiiUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiStudiiUpdatePut(requestParameters: ApiStudiiUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiStudiiUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
