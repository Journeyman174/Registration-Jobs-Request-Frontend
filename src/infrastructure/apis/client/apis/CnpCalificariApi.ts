/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CnpCalificariAddDTO,
  CnpCalificariDTOPagedResponseRequestResponse,
  CnpCalificariDTORequestResponse,
  RequestResponse,
} from '../models';
import {
    CnpCalificariAddDTOFromJSON,
    CnpCalificariAddDTOToJSON,
    CnpCalificariDTOPagedResponseRequestResponseFromJSON,
    CnpCalificariDTOPagedResponseRequestResponseToJSON,
    CnpCalificariDTORequestResponseFromJSON,
    CnpCalificariDTORequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiCnpCalificariCancelIdDeleteRequest {
    id: string;
}

export interface ApiCnpCalificariCreatePostRequest {
    cnpCalificariAddDTO?: CnpCalificariAddDTO;
}

export interface ApiCnpCalificariGetByIdIdGetRequest {
    id: string;
}

export interface ApiCnpCalificariGetFromUserIdGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

/**
 * 
 */
export class CnpCalificariApi extends runtime.BaseAPI {

    /**
     */
    async apiCnpCalificariCancelIdDeleteRaw(requestParameters: ApiCnpCalificariCancelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCnpCalificariCancelIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CnpCalificari/Cancel/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCnpCalificariCancelIdDelete(requestParameters: ApiCnpCalificariCancelIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiCnpCalificariCancelIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCnpCalificariCreatePostRaw(requestParameters: ApiCnpCalificariCreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CnpCalificari/Create`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CnpCalificariAddDTOToJSON(requestParameters['cnpCalificariAddDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCnpCalificariCreatePost(requestParameters: ApiCnpCalificariCreatePostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiCnpCalificariCreatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCnpCalificariGetByIdIdGetRaw(requestParameters: ApiCnpCalificariGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CnpCalificariDTORequestResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling apiCnpCalificariGetByIdIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CnpCalificari/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CnpCalificariDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCnpCalificariGetByIdIdGet(requestParameters: ApiCnpCalificariGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CnpCalificariDTORequestResponse> {
        const response = await this.apiCnpCalificariGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiCnpCalificariGetFromUserIdGetRaw(requestParameters: ApiCnpCalificariGetFromUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CnpCalificariDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['Search'] = requestParameters['search'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['Page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['PageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/CnpCalificari/GetFromUserId`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CnpCalificariDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiCnpCalificariGetFromUserIdGet(requestParameters: ApiCnpCalificariGetFromUserIdGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CnpCalificariDTOPagedResponseRequestResponse> {
        const response = await this.apiCnpCalificariGetFromUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
